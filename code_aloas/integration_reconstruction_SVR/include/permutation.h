#ifndef PERMUTATION_H
#define PERMUTATION_H

#include <stdlib.h>
#include <stdio.h>
#include <string.h>


struct Permutation{
    unsigned int* permutation;
    unsigned int size;
};

typedef struct Permutation Permutation;

Permutation create_permutation(unsigned int n);
void destroy_permutation(Permutation sigma);
Permutation permutation_copy(Permutation sigma);
Permutation permutation_composition(Permutation sigma1,Permutation sigma2);//i-->sigma1(sigma2(i))
Permutation inverse_permutation(Permutation sigma);
void get_inverse_permutation(Permutation sigma,Permutation invSigma);
Permutation transposition(unsigned int i,unsigned int j,unsigned int n);
void apply_transposition_to_permutation(Permutation sigma,unsigned int i,unsigned int j);

Permutation random_permutation(unsigned int n);
Permutation random_transposition(unsigned int n);

unsigned int* give_random_distinct_integers(unsigned int sampleSize,unsigned int max);
void random_distinct_elements_in_range(unsigned int sampleSize,unsigned int min,unsigned int max,unsigned int* array);

void compose_random_transposition(Permutation p); //i-->tau(p(i))
Permutation fast_random_permutation(unsigned int size); // uses the fact that Sn is generated by the sset of transpositions, so we pick some randomly and compose them
void compose_random_transposition_and_get(Permutation p,unsigned int* a,unsigned int* b);// gives the suport of the transpostion applied

void print_permutation(Permutation p);
#endif